name: "update-rpm-config"
description: "Set current version of agent in rpm config using API."
inputs:
  agent-language:
    description: "Language agent to configure (eg. python)"
    required: true
    default: "python"
  target-system:
    description: "Target System: prod|staging|all"
    required: true
    default: "all"
  agent-version:
    description: "3-4 digit agent version number (eg. 1.2.3)"
    required: true
  dry-run:
    description: "Dry Run"
    required: true
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Verify agent version is valid
      shell: bash
      run: curl -qs -L http://download.newrelic.com/${{inputs.agent-language}}_agent/archive | awk -F \" '{print $2}' | awk -F/ '{print $4}' | grep -q -w "${{inputs.agent-version}}"

    - name: Generate Payload
      shell: bash
      run: |
        echo "PAYLOAD={
            \"system_configuration\": {
                \"key\":   \"${{inputs.agent-language}}_agent_version\",
                \"value\": \"${{ inputs.agent-version }}\"
            }
        }" >> $GITHUB_ENV

    - name: Generate Content-Type
      shell: bash
      run: |
        echo "CONTENT-TYPE='Content-Type: application/json'" >> $GITHUB_ENV"

    - name: Update Staging system configuration page
      shell: bash
      if: ${{ inputs.dry-run == "false" && (inputs.target-system == 'staging' || inputs.target-system == 'all') }}
      run: |
        curl -X POST 'https://staging-api.newrelic.com/v2/system_configuration.json' \
        -H "X-Api-Key:${{ secrets.CORE_CONFIGURATION_API_KEY_STAGING }}" -i \
        -H "${{ env.CONTENT-TYPE }}" \
        -d "${{ env.PAYLOAD }}"

    - name: Update Production system configuration page
      shell: bash
      if: ${{ inputs.dry-run == "false" && (inputs.target-system == 'prod' || inputs.target-system == 'all') }}
      run: |
        curl -X POST 'https://api.newrelic.com/v2/system_configuration.json' \
        -H "X-Api-Key:${{ secrets.CORE_CONFIGURATION_API_KEY_PRODUCTION }}" -i \
        -H "${{ env.CONTENT-TYPE }}" \
        -d "${{ env.PAYLOAD }}"

    - name: Verify Staging system configuration update
      shell: bash
      if: ${{ inputs.dry-run == "false" && (inputs.target-system == 'staging' || inputs.target-system == 'all') }}
      run: |
        STAGING_VERSION=$(curl -X GET 'https://staging-api.newrelic.com/v2/system_configuration.json' \
        -H "X-Api-Key:${{ secrets.CORE_CONFIGURATION_API_KEY_STAGING }}" \
        -H "${{ env.CONTENT-TYPE }}" | jq ".system_configurations | from_entries | .${{inputs.agent-language}}_agent_version")

        if [ "${{ inputs.agent-version }}" != "$STAGING_VERSION" ]; then
            echo "Staging version mismatch: $STAGING_VERSION"
            exit 1
        fi

    - name: Verify Production system configuration update
      shell: bash
      if: ${{ inputs.dry-run == "false" && (inputs.target-system == 'prod' || inputs.target-system == 'all') }}
      run: |
        PROD_VERSION=$(curl -X GET 'https://api.newrelic.com/v2/system_configuration.json' \
        -H "X-Api-Key:${{ secrets.CORE_CONFIGURATION_API_KEY_PRODUCTION }}" \
        -H "${{ env.CONTENT-TYPE }}" | jq ".system_configurations | from_entries | .${{inputs.agent-language}}_agent_version")

        if [ "${{ inputs.agent-version }}" != "$PROD_VERSION" ]; then
            echo "Production version mismatch: $PROD_VERSION"
            exit 1
        fi

    - name: (dry-run) Update Staging system configuration page
      shell: bash
      if: ${{ inputs.dry-run != "false" && (inputs.target-system == 'staging' || inputs.target-system == 'all') }}
      run: |
        cat << EOF
            curl -X POST 'https://staging-api.newrelic.com/v2/system_configuration.json' \
            -H "X-Api-Key:**REDACTED**" -i \
            -H "${{ env.CONTENT-TYPE }}" \
            -d "${{ env.PAYLOAD }}"
        EOF

    - name: (dry-run) Update Production system configuration page
      shell: bash
      if: ${{ inputs.dry-run != "false" && (inputs.target-system == 'prod' || inputs.target-system == 'all') }}
      run: |
        cat << EOF
            curl -X POST 'https://api.newrelic.com/v2/system_configuration.json' \
            -H "X-Api-Key:**REDACTED**" -i \
            -H "${{ env.CONTENT-TYPE }}" \
            -d "${{ env.PAYLOAD }}"   
        EOF
