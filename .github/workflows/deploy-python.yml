# Copyright 2010 New Relic, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
name: Deploy

on:
  release:
    types:
      - published

jobs:
  build-linux-py3-legacy:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        wheel:
          - cp37-manylinux
          - cp37-musllinux

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # 4.1.1
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Setup QEMU
        uses: docker/setup-qemu-action@53851d14592bedcffcf25ea515637cff71ef929a # 3.3.0

      - name: Build Wheels
        uses: pypa/cibuildwheel@8d945475ac4b1aac4ae08b2fd27db9917158b6ce # 2.17.0
        env:
          CIBW_PLATFORM: linux
          CIBW_BUILD: "${{ matrix.wheel }}*"
          CIBW_ARCHS_LINUX: x86_64 aarch64
          CIBW_ENVIRONMENT: "LD_LIBRARY_PATH=/opt/rh/devtoolset-8/root/usr/lib64:/opt/rh/devtoolset-8/root/usr/lib:/opt/rh/devtoolset-8/root/usr/lib64/dyninst:/opt/rh/devtoolset-8/root/usr/lib/dyninst:/usr/local/lib64:/usr/local/lib"
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: "PYTHONPATH={project}/tests pytest {project}/tests/agent_unittests -vx"

      - name: Upload Artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # 4.3.1
        with:
          name: ${{ github.job }}-${{ matrix.wheel }}
          path: ./wheelhouse/*.whl
          retention-days: 1

  build-linux-py3:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        wheel:
          - cp38-manylinux
          - cp38-musllinux
          - cp39-manylinux
          - cp39-musllinux
          - cp310-manylinux
          - cp310-musllinux
          - cp311-manylinux
          - cp311-musllinux
          - cp312-manylinux
          - cp312-musllinux
          - cp313-manylinux
          - cp313-musllinux

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # 4.1.1
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Setup QEMU
        uses: docker/setup-qemu-action@53851d14592bedcffcf25ea515637cff71ef929a # 3.3.0

      - name: Build Wheels
        uses: pypa/cibuildwheel@ee63bf16da6cddfb925f542f2c7b59ad50e93969 # 2.22.0
        env:
          CIBW_PLATFORM: linux
          CIBW_BUILD: "${{ matrix.wheel }}*"
          CIBW_ARCHS_LINUX: x86_64 aarch64
          CIBW_ENVIRONMENT: "LD_LIBRARY_PATH=/opt/rh/devtoolset-8/root/usr/lib64:/opt/rh/devtoolset-8/root/usr/lib:/opt/rh/devtoolset-8/root/usr/lib64/dyninst:/opt/rh/devtoolset-8/root/usr/lib/dyninst:/usr/local/lib64:/usr/local/lib"
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: "PYTHONPATH={project}/tests pytest {project}/tests/agent_unittests -vx"

      - name: Upload Artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # 4.3.1
        with:
          name: ${{ github.job }}-${{ matrix.wheel }}
          path: ./wheelhouse/*.whl
          retention-days: 1

  build-sdist:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # 4.1.1
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          pip install -U pip
          pip install -U setuptools packaging

      - name: Build Source Package
        run: |
          python setup.py sdist

      - name: Prepare MD5 Hash File
        run: |
          tarball="$(python setup.py --fullname).tar.gz"
          md5_file=${tarball}.md5
          openssl md5 -binary dist/${tarball} | xxd -p | tr -d '\n' > dist/${md5_file}

      - name: Upload Artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # 4.3.1
        with:
          name: ${{ github.job }}-sdist
          path: |
            ./dist/*.tar.gz
            ./dist/*.tar.gz.md5
          retention-days: 1

  deploy:
    runs-on: ubuntu-22.04

    needs:
      - build-linux-py3-legacy
      - build-linux-py3
      - build-sdist

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # 4.1.1
        with:
          persist-credentials: false
          fetch-depth: 0

      - uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # 5.1.0
        with:
          python-version: "3.x"
          architecture: x64

      - name: Install Dependencies
        run: |
          pip install -U pip
          pip install -U wheel setuptools packaging twine 

      - name: Download Artifacts
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # 4.1.4
        with:
          path: ./artifacts/

      - name: Unpack Artifacts
        run: |
          mkdir -p dist/
          mv artifacts/**/*{.whl,.tar.gz,.tar.gz.md5} dist/

      - name: Upload Package to S3
        run: |
          tarball="$(python setup.py --fullname).tar.gz"
          md5_file=${tarball}.md5
          aws s3 cp dist/${md5_file} $S3_DST/${md5_file}
          aws s3 cp dist/${tarball} $S3_DST/${tarball}
        env:
          S3_DST: s3://nr-downloads-main/python_agent/release
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-west-2

      - name: Upload Package to PyPI
        run: |
          twine upload --non-interactive dist/*.tar.gz dist/*.whl
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Create release tags for Lambda and K8s Init Containers
        run: |
          RELEASE_TITLE="New Relic Python Agent ${GITHUB_REF_NAME}.0"
          RELEASE_TAG="${GITHUB_REF_NAME}.0_python"
          RELEASE_NOTES="Automated release for [Python Agent ${GITHUB_REF_NAME}](https://github.com/newrelic/newrelic-python-agent/releases/tag/${GITHUB_REF_NAME})"
          gh auth login --with-token <<< $GH_RELEASE_TOKEN
          echo "newrelic/newrelic-lambda-layers - Releasing \"${RELEASE_TITLE}\" with tag ${RELEASE_TAG}"
          gh release create "${RELEASE_TAG}" --title="${RELEASE_TITLE}" --repo=newrelic/newrelic-lambda-layers --notes="${RELEASE_NOTES}"
          echo "newrelic/newrelic-agent-init-container - Releasing \"${RELEASE_TITLE}\" with tag ${RELEASE_TAG}"
          gh release create "${RELEASE_TAG}" --title="${RELEASE_TITLE}" --repo=newrelic/newrelic-agent-init-container --notes="${RELEASE_NOTES}"
        env:
          GH_RELEASE_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
