# Copyright 2010 New Relic, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Tests

on:
  push:
    branches:
      - main
    tags-ignore:
      - "**"
  pull_request:
  schedule:
    - cron: "0 15 * * *"

jobs:
  tests: # Aggregate job that provides a single check for workflow success
    runs-on: ubuntu-latest
    needs:
      - python
      - grpc
      - libcurl
      - postgres
      - mysql
      - redis
      - solr
      - memcached
      - rabbitmq
      - mongodb
      - elasticsearchserver01
      - elasticsearchserver07
      - gearman

    steps:
      - name: Success
        run: echo "Success!"

  python:
    env:
      TOTAL_GROUPS: 20

    strategy:
      matrix:
        group-number:
          [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
          ]

    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v2

      # Set up all versions of python
      - uses: actions/setup-python@v2
        with:
          python-version: "2.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.6"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "pypy3"
          architecture: x64

      # Setup pypy2 after pypy3 to ensure pypy isn't aliased to pypy3
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy2"
          architecture: x64

      - name: Install Dependencies
        run: |
          pip install -U pip
          pip install -U wheel setuptools tox virtualenv!=20.0.24

      - name: Get Environments
        id: get-envs
        run: |
          echo "::set-output name=envs::$(tox -l | grep "^${{ github.job }}\-" | ./.github/workflows/get-envs.py)"
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

  grpc:
    env:
      TOTAL_GROUPS: 1

    strategy:
      matrix:
        group-number: [1]

    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v2

      # Set up all versions of python
      - uses: actions/setup-python@v2
        with:
          python-version: "2.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.6"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "pypy3"
          architecture: x64

      # Setup pypy2 after pypy3 to ensure pypy isn't aliased to pypy3
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy2"
          architecture: x64

      - name: Install Dependencies
        run: |
          pip install -U pip
          pip install -U wheel setuptools tox virtualenv!=20.0.24

      - name: Get Environments
        id: get-envs
        run: |
          echo "::set-output name=envs::$(tox -l | grep "^${{ github.job }}\-" | ./.github/workflows/get-envs.py)"
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }}
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

  libcurl:
    env:
      TOTAL_GROUPS: 1

    strategy:
      matrix:
        group-number: [1]

    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v2

      # Set up all versions of python
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy3"
          architecture: x64

      # Set up pypy2 after pypy3 to ensure pypy isn't aliased to pypy3
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy2"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "2.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.6"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: x64

      # Set up python 3.9 last to ensure tox runs CPython
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64

      - name: Install Dependencies
        run: |
          pip install -U pip
          pip install -U wheel setuptools tox virtualenv!=20.0.24

      # Special case packages
      - name: Install libcurl-dev
        run: |
          sudo apt-get update
          sudo apt-get install libcurl4-openssl-dev

      - name: Get Environments
        id: get-envs
        run: |
          echo "::set-output name=envs::$(tox -l | grep "^${{ github.job }}\-" | ./.github/workflows/get-envs.py)"
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

  postgres:
    env:
      TOTAL_GROUPS: 2

    strategy:
      matrix:
        group-number: [1, 2]

    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:9
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 8080:5432
          - 8081:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      # Set up all versions of python
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy3"
          architecture: x64

      # Set up pypy2 after pypy3 to ensure pypy isn't aliased to pypy3
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy2"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "2.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.6"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: x64

      # Set up python 3.9 last to ensure tox runs CPython
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64

      - name: Install Dependencies
        run: |
          pip install -U pip
          pip install -U wheel setuptools tox virtualenv!=20.0.24

      - name: Get Environments
        id: get-envs
        run: |
          echo "::set-output name=envs::$(tox -l | grep "^${{ github.job }}\-" | ./.github/workflows/get-envs.py)"
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

  mysql:
    env:
      TOTAL_GROUPS: 2

    strategy:
      matrix:
        group-number: [1, 2]

    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      mysql:
        image: mysql:5.6
        env:
          MYSQL_RANDOM_ROOT_PASSWORD: "true"
          MYSQL_DATABASE: python_agent
          MYSQL_USER: python_agent
          MYSQL_PASSWORD: python_agent
        ports:
          - 8080:3306
          - 8081:3306
        # Set health checks to wait until mysql has started
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      # Set up all versions of python
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy3"
          architecture: x64

      # Set up pypy2 after pypy3 to ensure pypy isn't aliased to pypy3
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy2"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "2.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.6"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: x64

      # Set up python 3.9 last to ensure tox runs CPython
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64

      - name: Install Dependencies
        run: |
          pip install -U pip
          pip install -U wheel setuptools tox virtualenv!=20.0.24

      - name: Get Environments
        id: get-envs
        run: |
          echo "::set-output name=envs::$(tox -l | grep "^${{ github.job }}\-" | ./.github/workflows/get-envs.py)"
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

  redis:
    env:
      TOTAL_GROUPS: 1

    strategy:
      matrix:
        group-number: [1]

    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      redis:
        image: redis
        ports:
          - 8080:6379
          - 8081:6379
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      # Set up all versions of python
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy3"
          architecture: x64

      # Set up pypy2 after pypy3 to ensure pypy isn't aliased to pypy3
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy2"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "2.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.6"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: x64

      # Set up python 3.9 last to ensure tox runs CPython
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64

      - name: Install Dependencies
        run: |
          pip install -U pip
          pip install -U wheel setuptools tox virtualenv!=20.0.24

      - name: Get Environments
        id: get-envs
        run: |
          echo "::set-output name=envs::$(tox -l | grep "^${{ github.job }}\-" | ./.github/workflows/get-envs.py)"
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

  solr:
    env:
      TOTAL_GROUPS: 1

    strategy:
      matrix:
        group-number: [1]

    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      solr:
        image: bitnami/solr:8.8.2
        env:
          SOLR_CORE: collection
        ports:
          - 8080:8983
          - 8081:8983
        # Set health checks to wait until solr has started
        options: >-
          --health-cmd "curl localhost:8983/solr/collection/admin/ping | grep OK"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      # Set up all versions of python
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy3"
          architecture: x64

      # Set up pypy2 after pypy3 to ensure pypy isn't aliased to pypy3
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy2"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "2.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.6"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: x64

      # Set up python 3.9 last to ensure tox runs CPython
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64

      - name: Install Dependencies
        run: |
          pip install -U pip
          pip install -U wheel setuptools tox virtualenv!=20.0.24

      - name: Get Environments
        id: get-envs
        run: |
          echo "::set-output name=envs::$(tox -l | grep "^${{ github.job }}\-" | ./.github/workflows/get-envs.py)"
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

  memcached:
    env:
      TOTAL_GROUPS: 2

    strategy:
      matrix:
        group-number: [1, 2]

    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      memcached:
        image: memcached
        ports:
          - 8080:11211
          - 8081:11211
        # Set health checks to wait until memcached has started
        options: >-
          --health-cmd "timeout 5 bash -c 'cat < /dev/null > /dev/udp/127.0.0.1/11211'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      # Set up all versions of python
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy3"
          architecture: x64

      # Set up pypy2 after pypy3 to ensure pypy isn't aliased to pypy3
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy2"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "2.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.6"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: x64

      # Set up python 3.9 last to ensure tox runs CPython
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64

      - name: Install Dependencies
        run: |
          pip install -U pip
          pip install -U wheel setuptools tox virtualenv!=20.0.24

      - name: Get Environments
        id: get-envs
        run: |
          echo "::set-output name=envs::$(tox -l | grep "^${{ github.job }}\-" | ./.github/workflows/get-envs.py)"
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

  rabbitmq:
    env:
      TOTAL_GROUPS: 1

    strategy:
      matrix:
        group-number: [1]

    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      rabbitmq:
        image: rabbitmq
        env:
          RABBITMQ_PASSWORD: rabbitmq
        ports:
          - 5672:5672
        # Set health checks to wait until rabbitmq has started
        options: >-
          --health-cmd "rabbitmq-diagnostics status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      # Set up all versions of python
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy3"
          architecture: x64

      # Set up pypy2 after pypy3 to ensure pypy isn't aliased to pypy3
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy2"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "2.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.6"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: x64

      # Set up python 3.9 last to ensure tox runs CPython
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64

      - name: Install Dependencies
        run: |
          pip install -U pip
          pip install -U wheel setuptools tox virtualenv!=20.0.24

      - name: Get Environments
        id: get-envs
        run: |
          echo "::set-output name=envs::$(tox -l | grep "^${{ github.job }}\-" | ./.github/workflows/get-envs.py)"
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

  mongodb:
    env:
      TOTAL_GROUPS: 1

    strategy:
      matrix:
        group-number: [1]

    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      mongodb:
        image: mongo:3.6.4
        ports:
          - 8080:27017
          - 8081:27017
        # Set health checks to wait until mongodb has started
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongo localhost:27017/test --quiet || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      # Set up all versions of python
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy3"
          architecture: x64

      # Set up pypy2 after pypy3 to ensure pypy isn't aliased to pypy3
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy2"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "2.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.6"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: x64

      # Set up python 3.9 last to ensure tox runs CPython
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64

      - name: Install Dependencies
        run: |
          pip install -U pip
          pip install -U wheel setuptools tox virtualenv!=20.0.24

      - name: Get Environments
        id: get-envs
        run: |
          echo "::set-output name=envs::$(tox -l | grep "^${{ github.job }}\-" | ./.github/workflows/get-envs.py)"
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

  elasticsearchserver01:
    env:
      TOTAL_GROUPS: 1

    strategy:
      matrix:
        group-number: [1]

    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      es01:
        image: elasticsearch:1.4.4
        env:
          "discovery.type": "single-node"
        ports:
          - 8080:9200
          - 8081:9200
        # Set health checks to wait until elasticsearch has started
        options: >-
          --health-cmd "curl --silent --fail localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      # Set up all versions of python
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy3"
          architecture: x64

      # Set up pypy2 after pypy3 to ensure pypy isn't aliased to pypy3
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy2"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "2.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.6"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: x64

      # Set up python 3.9 last to ensure tox runs CPython
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64

      - name: Install Dependencies
        run: |
          pip install -U pip
          pip install -U wheel setuptools tox virtualenv!=20.0.24

      - name: Get Environments
        id: get-envs
        run: |
          echo "::set-output name=envs::$(tox -l | grep "^${{ github.job }}\-" | ./.github/workflows/get-envs.py)"
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

  elasticsearchserver07:
    env:
      TOTAL_GROUPS: 1

    strategy:
      matrix:
        group-number: [1]

    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      es01:
        image: elasticsearch:7.13.2
        env:
          "discovery.type": "single-node"
        ports:
          - 8080:9200
          - 8081:9200
        # Set health checks to wait until elasticsearch has started
        options: >-
          --health-cmd "curl --silent --fail localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      # Set up all versions of python
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy3"
          architecture: x64

      # Set up pypy2 after pypy3 to ensure pypy isn't aliased to pypy3
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy2"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "2.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.6"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: x64

      # Set up python 3.9 last to ensure tox runs CPython
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64

      - name: Install Dependencies
        run: |
          pip install -U pip
          pip install -U wheel setuptools tox virtualenv!=20.0.24

      - name: Get Environments
        id: get-envs
        run: |
          echo "::set-output name=envs::$(tox -l | grep "^${{ github.job }}\-" | ./.github/workflows/get-envs.py)"
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

  gearman:
    env:
      TOTAL_GROUPS: 1

    strategy:
      matrix:
        group-number: [1]

    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      gearman:
        image: artefactual/gearmand
        ports:
          - 4730:4730
        # Set health checks to wait until gearman has started
        options: >-
          --health-cmd "(echo status ; sleep 0.1) | nc 127.0.0.1 4730 -w 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      # Set up all versions of python
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy3"
          architecture: x64

      # Set up pypy2 after pypy3 to ensure pypy isn't aliased to pypy3
      - uses: actions/setup-python@v2
        with:
          python-version: "pypy2"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "2.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.6"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: x64

      # Set up python 3.9 last to ensure tox runs CPython
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          architecture: x64

      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: x64

      - name: Install Dependencies
        run: |
          pip install -U pip
          pip install -U wheel setuptools tox virtualenv!=20.0.24

      - name: Get Environments
        id: get-envs
        run: |
          echo "::set-output name=envs::$(tox -l | grep "^${{ github.job }}\-" | ./.github/workflows/get-envs.py)"
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0
