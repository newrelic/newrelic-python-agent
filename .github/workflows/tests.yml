# Copyright 2010 New Relic, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Tests

on:
  push:
    branches:
      - main
    tags-ignore:
      - '**'
  pull_request:
    branches:
      - main

jobs:
  python:

    strategy:
      matrix:
        test-directory: 
          - adapter_cheroot
          - adapter_gevent
          - adapter_gunicorn
          - adapter_uvicorn
          - agent_features
          - agent_streaming
          - agent_unittests
          - application_celery
          - component_djangorestframework
          - component_flask_rest
          - component_tastypie
          - coroutines_asyncio
          - cross_agent
          - datastore_sqlite
          - external_boto3
          - external_botocore
          - external_feedparser
          - external_http
          - external_httplib
          - external_httplib2
          - external_requests
          - external_urllib3
          - framework_aiohttp
          - framework_bottle
          - framework_cherrypy
          - framework_django
          - framework_falcon
          - framework_fastapi
          - framework_flask
          - framework_grpc
          - framework_pyramid
          - framework_sanic
          - framework_starlette
          - framework_tornado
          - template_mako

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Get Date
      id: get-date
      run: |
        echo "::set-output name=date::$(/bin/date -u "+%Y-%m-%d")"
      shell: bash

    - name: Cache Tox and Pip (Linux)
      if: startsWith(runner.os, 'Linux')
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-${{ steps.get-date.outputs.date }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-
          ${{ runner.os }}-${{ matrix.test-directory }}-

    # Special case packages
    - name: Install libcurl-dev
      if: ${{ matrix.test-directory == 'framework_tornado' }}
      run: |
        sudo apt-get update
        sudo apt-get install libcurl4-openssl-dev

    # Set up all versions of python
    - uses: actions/setup-python@v2
      with:
        python-version: 2.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.6
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy3
        architecture: x64

    # Setup pypy2 after pypy3 to ensure pypy isn't aliased to pypy3
    - uses: actions/setup-python@v2
      with:
        python-version: pypy2
        architecture: x64

    - name: Install Dependencies
      run: |
        pip install -U pip
        pip install -U wheel setuptools tox virtualenv!=20.0.24

    - name: Test
      run: |
        tox -vv -p auto -c tests/${{ matrix.test-directory }}/tox.ini
      env:
        TOX_PARALLEL_NO_SPINNER: 1
        PY_COLORS: 0

  postgres:

    strategy:
      matrix:
        test-directory: 
          - datastore_asyncpg
          - datastore_postgresql
          - datastore_psycopg2
          - datastore_psycopg2cffi

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:9
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 8080:5432
          - 8081:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Get Date
      id: get-date
      run: |
        echo "::set-output name=date::$(/bin/date -u "+%Y-%m-%d")"
      shell: bash

    - name: Cache Tox and Pip (Linux)
      if: startsWith(runner.os, 'Linux')
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-${{ steps.get-date.outputs.date }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-
          ${{ runner.os }}-${{ matrix.test-directory }}-

    # Set up all versions of python
    - uses: actions/setup-python@v2
      with:
        python-version: 2.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.6
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy3
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy2
        architecture: x64

    - name: Install Dependencies
      run: |
        pip install -U pip
        pip install -U wheel setuptools tox virtualenv!=20.0.24

    - name: Test
      run: |
        tox -vv -p auto -c tests/${{ matrix.test-directory }}/tox.ini
      env:
        TOX_PARALLEL_NO_SPINNER: 1
        PY_COLORS: 0

  mysql:

    strategy:
      matrix:
        test-directory:
          - datastore_mysql
          - datastore_mysqldb
          - datastore_pymysql

    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.6
        env:
          MYSQL_RANDOM_ROOT_PASSWORD: "true"
          MYSQL_DATABASE: python_agent
          MYSQL_USER: python_agent
          MYSQL_PASSWORD: python_agent
        ports:
          - 8080:3306
          - 8081:3306
        # Set health checks to wait until mysql has started
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Get Date
      id: get-date
      run: |
        echo "::set-output name=date::$(/bin/date -u "+%Y-%m-%d")"
      shell: bash

    - name: Cache Tox and Pip (Linux)
      if: startsWith(runner.os, 'Linux')
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-${{ steps.get-date.outputs.date }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-
          ${{ runner.os }}-${{ matrix.test-directory }}-

    # Set up all versions of python
    - uses: actions/setup-python@v2
      with:
        python-version: 2.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.6
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy3
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy2
        architecture: x64

    - name: Install Dependencies
      run: |
        pip install -U pip
        pip install -U wheel setuptools tox virtualenv!=20.0.24

    - name: Test
      run: |
        tox -vv -p auto -c tests/${{ matrix.test-directory }}/tox.ini
      env:
        TOX_PARALLEL_NO_SPINNER: 1
        PY_COLORS: 0

  redis:

    strategy:
      matrix:
        test-directory: [datastore_redis]

    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        ports:
          - 8080:6379
          - 8081:6379
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Get Date
      id: get-date
      run: |
        echo "::set-output name=date::$(/bin/date -u "+%Y-%m-%d")"
      shell: bash

    - name: Cache Tox and Pip (Linux)
      if: startsWith(runner.os, 'Linux')
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-${{ steps.get-date.outputs.date }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-
          ${{ runner.os }}-${{ matrix.test-directory }}-

    # Set up all versions of python
    - uses: actions/setup-python@v2
      with:
        python-version: 2.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.6
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy3
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy2
        architecture: x64

    - name: Install Dependencies
      run: |
        pip install -U pip
        pip install -U wheel setuptools tox virtualenv!=20.0.24

    - name: Test
      run: |
        tox -vv -p auto -c tests/${{ matrix.test-directory }}/tox.ini
      env:
        TOX_PARALLEL_NO_SPINNER: 1
        PY_COLORS: 0

  solr:

    strategy:
      matrix:
        test-directory: 
          - datastore_pysolr
          - datastore_solrpy

    runs-on: ubuntu-latest

    services:
      solr:
        image: bitnami/solr:8
        env:
          SOLR_CORE: collection
        ports:
          - 8080:8983
          - 8081:8983
        # Set health checks to wait until solr has started
        options: >-
          --health-cmd "curl localhost:8983/solr/collection/admin/ping | grep OK"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Get Date
      id: get-date
      run: |
        echo "::set-output name=date::$(/bin/date -u "+%Y-%m-%d")"
      shell: bash

    - name: Cache Tox and Pip (Linux)
      if: startsWith(runner.os, 'Linux')
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-${{ steps.get-date.outputs.date }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-
          ${{ runner.os }}-${{ matrix.test-directory }}-

    # Set up all versions of python
    - uses: actions/setup-python@v2
      with:
        python-version: 2.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.6
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy3
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy2
        architecture: x64

    - name: Install Dependencies
      run: |
        pip install -U pip
        pip install -U wheel setuptools tox virtualenv!=20.0.24

    - name: Test
      run: |
        tox -vv -p auto -c tests/${{ matrix.test-directory }}/tox.ini
      env:
        TOX_PARALLEL_NO_SPINNER: 1
        PY_COLORS: 0

  memcached:

    strategy:
      matrix:
        test-directory:
          - datastore_bmemcached
          - datastore_memcache
          - datastore_pylibmc
          - datastore_pymemcache
          - datastore_umemcache

    runs-on: ubuntu-latest

    services:
      memcached:
        image: memcached
        ports:
          - 8080:11211
          - 8081:11211
        # Set health checks to wait until memcached has started
        options: >-
          --health-cmd "timeout 5 bash -c 'cat < /dev/null > /dev/udp/127.0.0.1/11211'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Get Date
      id: get-date
      run: |
        echo "::set-output name=date::$(/bin/date -u "+%Y-%m-%d")"
      shell: bash

    - name: Cache Tox and Pip (Linux)
      if: startsWith(runner.os, 'Linux')
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-${{ steps.get-date.outputs.date }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-
          ${{ runner.os }}-${{ matrix.test-directory }}-

    # Set up all versions of python
    - uses: actions/setup-python@v2
      with:
        python-version: 2.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.6
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy3
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy2
        architecture: x64

    - name: Install Dependencies
      run: |
        pip install -U pip
        pip install -U wheel setuptools tox virtualenv!=20.0.24
    - name: Test
      run: |
        tox -vv -p auto -c tests/${{ matrix.test-directory }}/tox.ini
      env:
        TOX_PARALLEL_NO_SPINNER: 1
        PY_COLORS: 0

  rabbitmq:

    strategy:
      matrix:
        test-directory:
          - messagebroker_pika

    runs-on: ubuntu-latest

    services:
      rabbitmq:
        image: rabbitmq
        env:
          RABBITMQ_PASSWORD: rabbitmq
        ports:
          - 5672:5672
        # Set health checks to wait until rabbitmq has started
        options: >-
          --health-cmd "rabbitmq-diagnostics status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Get Date
      id: get-date
      run: |
        echo "::set-output name=date::$(/bin/date -u "+%Y-%m-%d")"
      shell: bash

    - name: Cache Tox and Pip (Linux)
      if: startsWith(runner.os, 'Linux')
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-${{ steps.get-date.outputs.date }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-
          ${{ runner.os }}-${{ matrix.test-directory }}-

    # Set up all versions of python
    - uses: actions/setup-python@v2
      with:
        python-version: 2.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.6
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy3
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy2
        architecture: x64

    - name: Install Dependencies
      run: |
        pip install -U pip
        pip install -U wheel setuptools tox virtualenv!=20.0.24
    - name: Test
      run: |
        tox -vv -p auto -c tests/${{ matrix.test-directory }}/tox.ini
      env:
        TOX_PARALLEL_NO_SPINNER: 1
        PY_COLORS: 0

  mongodb:

    strategy:
      matrix:
        test-directory:
          - datastore_pymongo

    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:3.6.4
        ports:
          - 8080:27017
          - 8081:27017
        # Set health checks to wait until mongodb has started
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongo localhost:27017/test --quiet || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Get Date
      id: get-date
      run: |
        echo "::set-output name=date::$(/bin/date -u "+%Y-%m-%d")"
      shell: bash

    - name: Cache Tox and Pip (Linux)
      if: startsWith(runner.os, 'Linux')
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-${{ steps.get-date.outputs.date }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-
          ${{ runner.os }}-${{ matrix.test-directory }}-

    # Set up all versions of python
    - uses: actions/setup-python@v2
      with:
        python-version: 2.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.6
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy3
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy2
        architecture: x64

    - name: Install Dependencies
      run: |
        pip install -U pip
        pip install -U wheel setuptools tox virtualenv!=20.0.24

    - name: Test
      run: |
        tox -vv -p auto -c tests/${{ matrix.test-directory }}/tox.ini
      env:
        TOX_PARALLEL_NO_SPINNER: 1
        PY_COLORS: 0

  elasticsearch:

    strategy:
      matrix:
        test-directory: 
          - datastore_elasticsearch
          - datastore_pyelasticsearch

    runs-on: ubuntu-latest

    services:
      es01:
        image: elasticsearch:1.4.4
        env:
          "discovery.type": "single-node"
        ports:
          - 8080:9200
          - 8081:9200
        # Set health checks to wait until elasticsearch has started
        options: >-
          --health-cmd "curl --silent --fail localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Get Date
      id: get-date
      run: |
        echo "::set-output name=date::$(/bin/date -u "+%Y-%m-%d")"
      shell: bash

    - name: Cache Tox and Pip (Linux)
      if: startsWith(runner.os, 'Linux')
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-${{ steps.get-date.outputs.date }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-
          ${{ runner.os }}-${{ matrix.test-directory }}-

    # Set up all versions of python
    - uses: actions/setup-python@v2
      with:
        python-version: 2.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.6
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy3
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy2
        architecture: x64

    - name: Install Dependencies
      run: |
        pip install -U pip
        pip install -U wheel setuptools tox virtualenv!=20.0.24

    - name: Test
      run: |
        tox -vv -p auto -c tests/${{ matrix.test-directory }}/tox.ini
      env:
        TOX_PARALLEL_NO_SPINNER: 1
        PY_COLORS: 0

  gearman:

    strategy:
      matrix:
        test-directory:
          - application_gearman

    runs-on: ubuntu-latest

    services:
      gearman:
        image: artefactual/gearmand
        ports:
          - 4730:4730
        # Set health checks to wait until gearman has started
        options: >-
          --health-cmd "(echo status ; sleep 0.1) | nc 127.0.0.1 4730 -w 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Get Date
      id: get-date
      run: |
        echo "::set-output name=date::$(/bin/date -u "+%Y-%m-%d")"
      shell: bash

    - name: Cache Tox and Pip (Linux)
      if: startsWith(runner.os, 'Linux')
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-${{ steps.get-date.outputs.date }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.test-directory }}-${{ hashFiles('tests/${{ matrix.test-directory }}/tox.ini', 'tests/base_requirements.txt') }}-
          ${{ runner.os }}-${{ matrix.test-directory }}-

    # Set up all versions of python
    - uses: actions/setup-python@v2
      with:
        python-version: 2.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.6
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy3
        architecture: x64

    - uses: actions/setup-python@v2
      with:
        python-version: pypy2
        architecture: x64

    - name: Install Dependencies
      run: |
        pip install -U pip
        pip install -U wheel setuptools tox virtualenv!=20.0.24

    - name: Test
      run: |
        tox -vv -p auto -c tests/${{ matrix.test-directory }}/tox.ini
      env:
        TOX_PARALLEL_NO_SPINNER: 1
        PY_COLORS: 0