# Copyright 2010 New Relic, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Tests

on:
  push:
    branches:
      - main
    tags-ignore:
      - "**"
  pull_request:
  schedule:
    - cron: "0 15 * * *"

concurrency:
  group: ${{ github.ref || github.run_id }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  # Aggregate job that provides a single check for all tests passing
  tests:
    runs-on: ubuntu-20.04
    needs:
      - python
      - elasticsearchserver07
      - elasticsearchserver08
      - gearman
      - grpc
      - kafka
      - memcached
      - mongodb
      - mssql
      - mysql
      - postgres
      - rabbitmq
      - redis
      - rediscluster
      - solr

    steps:
      - name: Success
        run: echo "Success!"

  # Combine and upload coverage data
  coverage:
    if: success() || failure() # Does not run on cancelled workflows
    runs-on: ubuntu-20.04
    needs:
      - tests

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          architecture: x64

      - name: Download Coverage Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./

      - name: Combine Coverage
        run: |
          pip install coverage
          find . -name ".coverage.*" -exec mv {} ./ \;
          coverage combine
          coverage xml

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
          fail_ci_if_error: true

  # Tests
  python:
    env:
      TOTAL_GROUPS: 20

    strategy:
      fail-fast: false
      matrix:
        group-number:
          [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
          ]

    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/newrelic/newrelic-python-agent-ci:latest
      options: >-
        --add-host=host.docker.internal:host-gateway
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v3

      - name: Fetch git tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --tags origin

      - name: Get Environments
        id: get-envs
        run: |
          echo "envs=$(tox -l | grep '^${{ github.job }}\-' | ./.github/workflows/get-envs.py)" >> $GITHUB_OUTPUT
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.job }}-${{ strategy.job-index }}
          path: ./**/.coverage.*
          retention-days: 1

  grpc:
    env:
      TOTAL_GROUPS: 1

    strategy:
      fail-fast: false
      matrix:
        group-number: [1]

    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/newrelic/newrelic-python-agent-ci:latest
      options: >-
        --add-host=host.docker.internal:host-gateway
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v3

      - name: Fetch git tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --tags origin

      - name: Get Environments
        id: get-envs
        run: |
          echo "envs=$(tox -l | grep '^${{ github.job }}\-' | ./.github/workflows/get-envs.py)" >> $GITHUB_OUTPUT
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }}
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.job }}-${{ strategy.job-index }}
          path: ./**/.coverage.*
          retention-days: 1

  postgres:
    env:
      TOTAL_GROUPS: 2

    strategy:
      fail-fast: false
      matrix:
        group-number: [1, 2]

    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/newrelic/newrelic-python-agent-ci:latest
      options: >-
        --add-host=host.docker.internal:host-gateway
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:9
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 8080:5432
          - 8081:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Fetch git tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --tags origin

      - name: Get Environments
        id: get-envs
        run: |
          echo "envs=$(tox -l | grep '^${{ github.job }}\-' | ./.github/workflows/get-envs.py)" >> $GITHUB_OUTPUT
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.job }}-${{ strategy.job-index }}
          path: ./**/.coverage.*
          retention-days: 1

  mssql:
    env:
      TOTAL_GROUPS: 1

    strategy:
      fail-fast: false
      matrix:
        group-number: [1]

    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/newrelic/newrelic-python-agent-ci:latest
      options: >-
        --add-host=host.docker.internal:host-gateway
    timeout-minutes: 30

    services:
      mssql:
        image: mcr.microsoft.com/azure-sql-edge:latest
        env:
          MSSQL_USER: python_agent
          MSSQL_PASSWORD: python_agent
          MSSQL_SA_PASSWORD: "python_agent#1234"
          ACCEPT_EULA: "Y"
        ports:
          - 8080:1433
          - 8081:1433
        # Set health checks to wait until mysql has started
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -U SA -P $MSSQL_SA_PASSWORD -Q 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Fetch git tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --tags origin

      - name: Get Environments
        id: get-envs
        run: |
          echo "envs=$(tox -l | grep '^${{ github.job }}\-' | ./.github/workflows/get-envs.py)" >> $GITHUB_OUTPUT
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.job }}-${{ strategy.job-index }}
          path: ./**/.coverage.*
          retention-days: 1

  mysql:
    env:
      TOTAL_GROUPS: 2

    strategy:
      fail-fast: false
      matrix:
        group-number: [1, 2]

    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/newrelic/newrelic-python-agent-ci:latest
      options: >-
        --add-host=host.docker.internal:host-gateway
    timeout-minutes: 30

    services:
      mysql:
        image: mysql:5.6
        env:
          MYSQL_RANDOM_ROOT_PASSWORD: "true"
          MYSQL_DATABASE: python_agent
          MYSQL_USER: python_agent
          MYSQL_PASSWORD: python_agent
        ports:
          - 8080:3306
          - 8081:3306
        # Set health checks to wait until mysql has started
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Fetch git tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --tags origin

      - name: Get Environments
        id: get-envs
        run: |
          echo "envs=$(tox -l | grep '^${{ github.job }}\-' | ./.github/workflows/get-envs.py)" >> $GITHUB_OUTPUT
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.job }}-${{ strategy.job-index }}
          path: ./**/.coverage.*
          retention-days: 1

  rediscluster:
    env:
      TOTAL_GROUPS: 1

    strategy:
      fail-fast: false
      matrix:
        group-number: [1]

    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/newrelic/newrelic-python-agent-ci:latest
      options: >-
        --add-host=host.docker.internal:host-gateway
    timeout-minutes: 30

    services:
      redis1:
        image: hmstepanek/redis-cluster-node:1.0.0
        ports:
          - 6379:6379
          - 16379:16379
        options: >-
          --add-host=host.docker.internal:host-gateway

      redis2:
        image: hmstepanek/redis-cluster-node:1.0.0
        ports:
          - 6380:6379
          - 16380:16379
        options: >-
          --add-host=host.docker.internal:host-gateway

      redis3:
        image: hmstepanek/redis-cluster-node:1.0.0
        ports:
          - 6381:6379
          - 16381:16379
        options: >-
          --add-host=host.docker.internal:host-gateway

      redis4:
        image: hmstepanek/redis-cluster-node:1.0.0
        ports:
          - 6382:6379
          - 16382:16379
        options: >-
          --add-host=host.docker.internal:host-gateway

      redis5:
        image: hmstepanek/redis-cluster-node:1.0.0
        ports:
          - 6383:6379
          - 16383:16379
        options: >-
          --add-host=host.docker.internal:host-gateway

      redis6:
        image: hmstepanek/redis-cluster-node:1.0.0
        ports:
          - 6384:6379
          - 16384:16379
        options: >-
          --add-host=host.docker.internal:host-gateway

      cluster-setup:
        image: hmstepanek/redis-cluster:1.0.0    
        options: >-
          --add-host=host.docker.internal:host-gateway

    steps:
      - uses: actions/checkout@v3

      - name: Fetch git tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --tags origin

      - name: Get Environments
        id: get-envs
        run: |
          echo "envs=$(tox -l | grep '^${{ github.job }}\-' | ./.github/workflows/get-envs.py)" >> $GITHUB_OUTPUT
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.job }}-${{ strategy.job-index }}
          path: ./**/.coverage.*
          retention-days: 1

  redis:
    env:
      TOTAL_GROUPS: 2

    strategy:
      fail-fast: false
      matrix:
        group-number: [1, 2]

    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/newrelic/newrelic-python-agent-ci:latest
      options: >-
        --add-host=host.docker.internal:host-gateway
    timeout-minutes: 30

    services:
      redis:
        image: redis
        ports:
          - 8080:6379
          - 8081:6379
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Fetch git tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --tags origin

      - name: Get Environments
        id: get-envs
        run: |
          echo "envs=$(tox -l | grep '^${{ github.job }}\-' | ./.github/workflows/get-envs.py)" >> $GITHUB_OUTPUT
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.job }}-${{ strategy.job-index }}
          path: ./**/.coverage.*
          retention-days: 1

  solr:
    env:
      TOTAL_GROUPS: 1

    strategy:
      fail-fast: false
      matrix:
        group-number: [1]

    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/newrelic/newrelic-python-agent-ci:latest
      options: >-
        --add-host=host.docker.internal:host-gateway
    timeout-minutes: 30

    services:
      solr:
        image: bitnami/solr:8.8.2
        env:
          SOLR_CORE: collection
        ports:
          - 8080:8983
          - 8081:8983
        # Set health checks to wait until solr has started
        options: >-
          --health-cmd "curl localhost:8983/solr/collection/admin/ping | grep OK"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Fetch git tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --tags origin

      - name: Get Environments
        id: get-envs
        run: |
          echo "envs=$(tox -l | grep '^${{ github.job }}\-' | ./.github/workflows/get-envs.py)" >> $GITHUB_OUTPUT
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.job }}-${{ strategy.job-index }}
          path: ./**/.coverage.*
          retention-days: 1

  memcached:
    env:
      TOTAL_GROUPS: 2

    strategy:
      fail-fast: false
      matrix:
        group-number: [1, 2]

    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/newrelic/newrelic-python-agent-ci:latest
      options: >-
        --add-host=host.docker.internal:host-gateway
    timeout-minutes: 30

    services:
      memcached:
        image: memcached
        ports:
          - 8080:11211
          - 8081:11211
        # Set health checks to wait until memcached has started
        options: >-
          --health-cmd "timeout 5 bash -c 'cat < /dev/null > /dev/udp/127.0.0.1/11211'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Fetch git tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --tags origin

      - name: Get Environments
        id: get-envs
        run: |
          echo "envs=$(tox -l | grep '^${{ github.job }}\-' | ./.github/workflows/get-envs.py)" >> $GITHUB_OUTPUT
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.job }}-${{ strategy.job-index }}
          path: ./**/.coverage.*
          retention-days: 1

  rabbitmq:
    env:
      TOTAL_GROUPS: 1

    strategy:
      fail-fast: false
      matrix:
        group-number: [1]

    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/newrelic/newrelic-python-agent-ci:latest
      options: >-
        --add-host=host.docker.internal:host-gateway
    timeout-minutes: 30

    services:
      rabbitmq:
        image: rabbitmq
        env:
          RABBITMQ_PASSWORD: rabbitmq
        ports:
          - 5672:5672
        # Set health checks to wait until rabbitmq has started
        options: >-
          --health-cmd "rabbitmq-diagnostics status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Fetch git tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --tags origin

      - name: Get Environments
        id: get-envs
        run: |
          echo "envs=$(tox -l | grep '^${{ github.job }}\-' | ./.github/workflows/get-envs.py)" >> $GITHUB_OUTPUT
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.job }}-${{ strategy.job-index }}
          path: ./**/.coverage.*
          retention-days: 1

  kafka:
    env:
      TOTAL_GROUPS: 4

    strategy:
      fail-fast: false
      matrix:
        group-number: [1, 2, 3, 4]

    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/newrelic/newrelic-python-agent-ci:latest
      options: >-
        --add-host=host.docker.internal:host-gateway
    timeout-minutes: 30

    services:
      zookeeper:
        image: bitnami/zookeeper:3.7
        env:
          ALLOW_ANONYMOUS_LOGIN: yes

        ports:
          - 2181:2181

      kafka:
        image: bitnami/kafka:3.2
        ports:
          - 8080:8080
          - 8082:8082
          - 8083:8083
        env:
          KAFKA_ENABLE_KRAFT: no
          ALLOW_PLAINTEXT_LISTENER: yes
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
          KAFKA_CFG_LISTENERS: L1://:8082,L2://:8083,L3://:8080
          KAFKA_CFG_ADVERTISED_LISTENERS: L1://host.docker.internal:8082,L2://host.docker.internal:8083,L3://kafka:8080
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: L1:PLAINTEXT,L2:PLAINTEXT,L3:PLAINTEXT
          KAFKA_CFG_INTER_BROKER_LISTENER_NAME: L3

    steps:
      - uses: actions/checkout@v3

      - name: Fetch git tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --tags origin

      - name: Get Environments
        id: get-envs
        run: |
          echo "envs=$(tox -l | grep '^${{ github.job }}\-' | ./.github/workflows/get-envs.py)" >> $GITHUB_OUTPUT
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.job }}-${{ strategy.job-index }}
          path: ./**/.coverage.*
          retention-days: 1

  mongodb:
    env:
      TOTAL_GROUPS: 1

    strategy:
      fail-fast: false
      matrix:
        group-number: [1]

    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/newrelic/newrelic-python-agent-ci:latest
      options: >-
        --add-host=host.docker.internal:host-gateway
    timeout-minutes: 30

    services:
      mongodb:
        image: mongo:3.6.4
        ports:
          - 8080:27017
          - 8081:27017
        # Set health checks to wait until mongodb has started
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongo localhost:27017/test --quiet || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Fetch git tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --tags origin

      - name: Get Environments
        id: get-envs
        run: |
          echo "envs=$(tox -l | grep '^${{ github.job }}\-' | ./.github/workflows/get-envs.py)" >> $GITHUB_OUTPUT
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.job }}-${{ strategy.job-index }}
          path: ./**/.coverage.*
          retention-days: 1

  elasticsearchserver07:
    env:
      TOTAL_GROUPS: 1

    strategy:
      fail-fast: false
      matrix:
        group-number: [1]

    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/newrelic/newrelic-python-agent-ci:latest
      options: >-
        --add-host=host.docker.internal:host-gateway
    timeout-minutes: 30

    services:
      elasticsearch:
        image: elasticsearch:7.17.8
        env:
          "discovery.type": "single-node"
        ports:
          - 8080:9200
          - 8081:9200
        # Set health checks to wait until elasticsearch has started
        options: >-
          --health-cmd "curl --silent --fail localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Fetch git tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --tags origin

      - name: Get Environments
        id: get-envs
        run: |
          echo "envs=$(tox -l | grep '^${{ github.job }}\-' | ./.github/workflows/get-envs.py)" >> $GITHUB_OUTPUT
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.job }}-${{ strategy.job-index }}
          path: ./**/.coverage.*
          retention-days: 1

  elasticsearchserver08:
    env:
      TOTAL_GROUPS: 1

    strategy:
      fail-fast: false
      matrix:
        group-number: [1]

    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/newrelic/newrelic-python-agent-ci:latest
      options: >-
        --add-host=host.docker.internal:host-gateway
    timeout-minutes: 30

    services:
      elasticsearch:
        image: elasticsearch:8.6.0
        env:
          "xpack.security.enabled": "false"
          "discovery.type": "single-node"
        ports:
          - 8080:9200
          - 8081:9200
        # Set health checks to wait until elasticsearch has started
        options: >-
          --health-cmd "curl --silent --fail localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Fetch git tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --tags origin

      - name: Get Environments
        id: get-envs
        run: |
          echo "envs=$(tox -l | grep '^${{ github.job }}\-' | ./.github/workflows/get-envs.py)" >> $GITHUB_OUTPUT
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.job }}-${{ strategy.job-index }}
          path: ./**/.coverage.*
          retention-days: 1

  gearman:
    env:
      TOTAL_GROUPS: 1

    strategy:
      fail-fast: false
      matrix:
        group-number: [1]

    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/newrelic/newrelic-python-agent-ci:latest
      options: >-
        --add-host=host.docker.internal:host-gateway
    timeout-minutes: 30

    services:
      gearman:
        image: artefactual/gearmand
        ports:
          - 8080:4730
        # Set health checks to wait until gearman has started
        options: >-
          --health-cmd "(echo status ; sleep 0.1) | nc 127.0.0.1 4730 -w 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Fetch git tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --tags origin

      - name: Get Environments
        id: get-envs
        run: |
          echo "envs=$(tox -l | grep '^${{ github.job }}\-' | ./.github/workflows/get-envs.py)" >> $GITHUB_OUTPUT
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.job }}-${{ strategy.job-index }}
          path: ./**/.coverage.*
          retention-days: 1

  firestore:
    env:
      TOTAL_GROUPS: 1

    strategy:
      fail-fast: false
      matrix:
        group-number: [1]

    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/newrelic/newrelic-python-agent-ci:latest
      options: >-
        --add-host=host.docker.internal:host-gateway
    timeout-minutes: 30

    services:
      firestore:
        # Image set here MUST be repeated down below in options. See comment below.
        image: gcr.io/google.com/cloudsdktool/google-cloud-cli:437.0.1-emulators
        ports:
          - 8080:8080
        # Set health checks to wait 5 seconds in lieu of an actual healthcheck
        options: >-
          --health-cmd "echo success"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 5s
          gcr.io/google.com/cloudsdktool/google-cloud-cli:437.0.1-emulators /bin/bash -c "gcloud emulators firestore start --host-port=0.0.0.0:8080" ||
        # This is a very hacky solution. GitHub Actions doesn't provide APIs for setting commands on services, but allows adding arbitrary options.
        # --entrypoint won't work as it only accepts an executable and not the [] syntax.
        # Instead, we specify the image again the command afterwards like a call to docker create. The result is a few environment variables
        # and the original command being appended to our hijacked docker create command. We can avoid any issues by adding || to prevent that
        # from every being executed as bash commands.

    steps:
      - uses: actions/checkout@v3

      - name: Fetch git tags
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch --tags origin

      - name: Get Environments
        id: get-envs
        run: |
          echo "envs=$(tox -l | grep '^${{ github.job }}\-' | ./.github/workflows/get-envs.py)" >> $GITHUB_OUTPUT
        env:
          GROUP_NUMBER: ${{ matrix.group-number }}

      - name: Test
        run: |
          tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto
        env:
          TOX_PARALLEL_NO_SPINNER: 1
          PY_COLORS: 0

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.job }}-${{ strategy.job-index }}
          path: ./**/.coverage.*
          retention-days: 1
