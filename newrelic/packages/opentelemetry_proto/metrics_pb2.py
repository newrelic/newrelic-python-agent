# -*- coding: utf-8 -*-
# =============================================================================
# WARNING: Generated from proto files edited with the following changes.
# 1. Replace listed .proto file paths with newrelic/packages/opentelemetry_proto/
# 2. Replace listed __module__ paths with newrelic.packages.opentelemetry_proto
# This prevents conflicts with other packages using different versions
# of opentelemetry's pb2 files.
# =============================================================================
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: newrelic/packages/opentelemetry_proto/metrics.proto
# Protobuf Python Version: 5.26.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from newrelic.packages.opentelemetry_proto import common_pb2 as newrelic_dot_packages_dot_opentelemetry__proto_dot_common__pb2
from newrelic.packages.opentelemetry_proto import resource_pb2 as newrelic_dot_packages_dot_opentelemetry__proto_dot_resource__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n3newrelic/packages/opentelemetry_proto/metrics.proto\x12%newrelic.packages.opentelemetry_proto\x1a\x32newrelic/packages/opentelemetry_proto/common.proto\x1a\x34newrelic/packages/opentelemetry_proto/resource.proto\"_\n\x0bMetricsData\x12P\n\x10resource_metrics\x18\x01 \x03(\x0b\x32\x36.newrelic.packages.opentelemetry_proto.ResourceMetrics\"\xbc\x01\n\x0fResourceMetrics\x12\x41\n\x08resource\x18\x01 \x01(\x0b\x32/.newrelic.packages.opentelemetry_proto.Resource\x12J\n\rscope_metrics\x18\x02 \x03(\x0b\x32\x33.newrelic.packages.opentelemetry_proto.ScopeMetrics\x12\x12\n\nschema_url\x18\x03 \x01(\tJ\x06\x08\xe8\x07\x10\xe9\x07\"\xae\x01\n\x0cScopeMetrics\x12J\n\x05scope\x18\x01 \x01(\x0b\x32;.newrelic.packages.opentelemetry_proto.InstrumentationScope\x12>\n\x07metrics\x18\x02 \x03(\x0b\x32-.newrelic.packages.opentelemetry_proto.Metric\x12\x12\n\nschema_url\x18\x03 \x01(\t\"\xf8\x03\n\x06Metric\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x02 \x01(\t\x12\x0c\n\x04unit\x18\x03 \x01(\t\x12=\n\x05gauge\x18\x05 \x01(\x0b\x32,.newrelic.packages.opentelemetry_proto.GaugeH\x00\x12\x39\n\x03sum\x18\x07 \x01(\x0b\x32*.newrelic.packages.opentelemetry_proto.SumH\x00\x12\x45\n\thistogram\x18\t \x01(\x0b\x32\x30.newrelic.packages.opentelemetry_proto.HistogramH\x00\x12\\\n\x15\x65xponential_histogram\x18\n \x01(\x0b\x32;.newrelic.packages.opentelemetry_proto.ExponentialHistogramH\x00\x12\x41\n\x07summary\x18\x0b \x01(\x0b\x32..newrelic.packages.opentelemetry_proto.SummaryH\x00\x12\x41\n\x08metadata\x18\x0c \x03(\x0b\x32/.newrelic.packages.opentelemetry_proto.KeyValueB\x06\n\x04\x64\x61taJ\x04\x08\x04\x10\x05J\x04\x08\x06\x10\x07J\x04\x08\x08\x10\t\"T\n\x05Gauge\x12K\n\x0b\x64\x61ta_points\x18\x01 \x03(\x0b\x32\x36.newrelic.packages.opentelemetry_proto.NumberDataPoint\"\xc8\x01\n\x03Sum\x12K\n\x0b\x64\x61ta_points\x18\x01 \x03(\x0b\x32\x36.newrelic.packages.opentelemetry_proto.NumberDataPoint\x12^\n\x17\x61ggregation_temporality\x18\x02 \x01(\x0e\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\x12\x14\n\x0cis_monotonic\x18\x03 \x01(\x08\"\xbb\x01\n\tHistogram\x12N\n\x0b\x64\x61ta_points\x18\x01 \x03(\x0b\x32\x39.newrelic.packages.opentelemetry_proto.HistogramDataPoint\x12^\n\x17\x61ggregation_temporality\x18\x02 \x01(\x0e\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\"\xd1\x01\n\x14\x45xponentialHistogram\x12Y\n\x0b\x64\x61ta_points\x18\x01 \x03(\x0b\x32\x44.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint\x12^\n\x17\x61ggregation_temporality\x18\x02 \x01(\x0e\x32=.newrelic.packages.opentelemetry_proto.AggregationTemporality\"W\n\x07Summary\x12L\n\x0b\x64\x61ta_points\x18\x01 \x03(\x0b\x32\x37.newrelic.packages.opentelemetry_proto.SummaryDataPoint\"\x95\x02\n\x0fNumberDataPoint\x12\x43\n\nattributes\x18\x07 \x03(\x0b\x32/.newrelic.packages.opentelemetry_proto.KeyValue\x12\x1c\n\x14start_time_unix_nano\x18\x02 \x01(\x06\x12\x16\n\x0etime_unix_nano\x18\x03 \x01(\x06\x12\x13\n\tas_double\x18\x04 \x01(\x01H\x00\x12\x10\n\x06\x61s_int\x18\x06 \x01(\x10H\x00\x12\x42\n\texemplars\x18\x05 \x03(\x0b\x32/.newrelic.packages.opentelemetry_proto.Exemplar\x12\r\n\x05\x66lags\x18\x08 \x01(\rB\x07\n\x05valueJ\x04\x08\x01\x10\x02\"\xf5\x02\n\x12HistogramDataPoint\x12\x43\n\nattributes\x18\t \x03(\x0b\x32/.newrelic.packages.opentelemetry_proto.KeyValue\x12\x1c\n\x14start_time_unix_nano\x18\x02 \x01(\x06\x12\x16\n\x0etime_unix_nano\x18\x03 \x01(\x06\x12\r\n\x05\x63ount\x18\x04 \x01(\x06\x12\x10\n\x03sum\x18\x05 \x01(\x01H\x00\x88\x01\x01\x12\x15\n\rbucket_counts\x18\x06 \x03(\x06\x12\x17\n\x0f\x65xplicit_bounds\x18\x07 \x03(\x01\x12\x42\n\texemplars\x18\x08 \x03(\x0b\x32/.newrelic.packages.opentelemetry_proto.Exemplar\x12\r\n\x05\x66lags\x18\n \x01(\r\x12\x10\n\x03min\x18\x0b \x01(\x01H\x01\x88\x01\x01\x12\x10\n\x03max\x18\x0c \x01(\x01H\x02\x88\x01\x01\x42\x06\n\x04_sumB\x06\n\x04_minB\x06\n\x04_maxJ\x04\x08\x01\x10\x02\"\xf7\x04\n\x1d\x45xponentialHistogramDataPoint\x12\x43\n\nattributes\x18\x01 \x03(\x0b\x32/.newrelic.packages.opentelemetry_proto.KeyValue\x12\x1c\n\x14start_time_unix_nano\x18\x02 \x01(\x06\x12\x16\n\x0etime_unix_nano\x18\x03 \x01(\x06\x12\r\n\x05\x63ount\x18\x04 \x01(\x06\x12\x10\n\x03sum\x18\x05 \x01(\x01H\x00\x88\x01\x01\x12\r\n\x05scale\x18\x06 \x01(\x11\x12\x12\n\nzero_count\x18\x07 \x01(\x06\x12^\n\x08positive\x18\x08 \x01(\x0b\x32L.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint.Buckets\x12^\n\x08negative\x18\t \x01(\x0b\x32L.newrelic.packages.opentelemetry_proto.ExponentialHistogramDataPoint.Buckets\x12\r\n\x05\x66lags\x18\n \x01(\r\x12\x42\n\texemplars\x18\x0b \x03(\x0b\x32/.newrelic.packages.opentelemetry_proto.Exemplar\x12\x10\n\x03min\x18\x0c \x01(\x01H\x01\x88\x01\x01\x12\x10\n\x03max\x18\r \x01(\x01H\x02\x88\x01\x01\x12\x16\n\x0ezero_threshold\x18\x0e \x01(\x01\x1a\x30\n\x07\x42uckets\x12\x0e\n\x06offset\x18\x01 \x01(\x11\x12\x15\n\rbucket_counts\x18\x02 \x03(\x04\x42\x06\n\x04_sumB\x06\n\x04_minB\x06\n\x04_max\"\xd4\x02\n\x10SummaryDataPoint\x12\x43\n\nattributes\x18\x07 \x03(\x0b\x32/.newrelic.packages.opentelemetry_proto.KeyValue\x12\x1c\n\x14start_time_unix_nano\x18\x02 \x01(\x06\x12\x16\n\x0etime_unix_nano\x18\x03 \x01(\x06\x12\r\n\x05\x63ount\x18\x04 \x01(\x06\x12\x0b\n\x03sum\x18\x05 \x01(\x01\x12`\n\x0fquantile_values\x18\x06 \x03(\x0b\x32G.newrelic.packages.opentelemetry_proto.SummaryDataPoint.ValueAtQuantile\x12\r\n\x05\x66lags\x18\x08 \x01(\r\x1a\x32\n\x0fValueAtQuantile\x12\x10\n\x08quantile\x18\x01 \x01(\x01\x12\r\n\x05value\x18\x02 \x01(\x01J\x04\x08\x01\x10\x02\"\xc9\x01\n\x08\x45xemplar\x12L\n\x13\x66iltered_attributes\x18\x07 \x03(\x0b\x32/.newrelic.packages.opentelemetry_proto.KeyValue\x12\x16\n\x0etime_unix_nano\x18\x02 \x01(\x06\x12\x13\n\tas_double\x18\x03 \x01(\x01H\x00\x12\x10\n\x06\x61s_int\x18\x06 \x01(\x10H\x00\x12\x0f\n\x07span_id\x18\x04 \x01(\x0c\x12\x10\n\x08trace_id\x18\x05 \x01(\x0c\x42\x07\n\x05valueJ\x04\x08\x01\x10\x02*\x8c\x01\n\x16\x41ggregationTemporality\x12\'\n#AGGREGATION_TEMPORALITY_UNSPECIFIED\x10\x00\x12!\n\x1d\x41GGREGATION_TEMPORALITY_DELTA\x10\x01\x12&\n\"AGGREGATION_TEMPORALITY_CUMULATIVE\x10\x02*^\n\x0e\x44\x61taPointFlags\x12\x1f\n\x1b\x44\x41TA_POINT_FLAGS_DO_NOT_USE\x10\x00\x12+\n\'DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK\x10\x01\x42\x7f\n!io.opentelemetry.proto.metrics.v1B\x0cMetricsProtoP\x01Z)go.opentelemetry.io/proto/otlp/metrics/v1\xaa\x02\x1eOpenTelemetry.Proto.Metrics.V1b\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'newrelic.packages.opentelemetry_proto.metrics_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n!io.opentelemetry.proto.metrics.v1B\014MetricsProtoP\001Z)go.opentelemetry.io/proto/otlp/metrics/v1\252\002\036OpenTelemetry.Proto.Metrics.V1'
  _globals['_AGGREGATIONTEMPORALITY']._serialized_start=3790
  _globals['_AGGREGATIONTEMPORALITY']._serialized_end=3930
  _globals['_DATAPOINTFLAGS']._serialized_start=3932
  _globals['_DATAPOINTFLAGS']._serialized_end=4026
  _globals['_METRICSDATA']._serialized_start=200
  _globals['_METRICSDATA']._serialized_end=295
  _globals['_RESOURCEMETRICS']._serialized_start=298
  _globals['_RESOURCEMETRICS']._serialized_end=486
  _globals['_SCOPEMETRICS']._serialized_start=489
  _globals['_SCOPEMETRICS']._serialized_end=663
  _globals['_METRIC']._serialized_start=666
  _globals['_METRIC']._serialized_end=1170
  _globals['_GAUGE']._serialized_start=1172
  _globals['_GAUGE']._serialized_end=1256
  _globals['_SUM']._serialized_start=1259
  _globals['_SUM']._serialized_end=1459
  _globals['_HISTOGRAM']._serialized_start=1462
  _globals['_HISTOGRAM']._serialized_end=1649
  _globals['_EXPONENTIALHISTOGRAM']._serialized_start=1652
  _globals['_EXPONENTIALHISTOGRAM']._serialized_end=1861
  _globals['_SUMMARY']._serialized_start=1863
  _globals['_SUMMARY']._serialized_end=1950
  _globals['_NUMBERDATAPOINT']._serialized_start=1953
  _globals['_NUMBERDATAPOINT']._serialized_end=2230
  _globals['_HISTOGRAMDATAPOINT']._serialized_start=2233
  _globals['_HISTOGRAMDATAPOINT']._serialized_end=2606
  _globals['_EXPONENTIALHISTOGRAMDATAPOINT']._serialized_start=2609
  _globals['_EXPONENTIALHISTOGRAMDATAPOINT']._serialized_end=3240
  _globals['_EXPONENTIALHISTOGRAMDATAPOINT_BUCKETS']._serialized_start=3168
  _globals['_EXPONENTIALHISTOGRAMDATAPOINT_BUCKETS']._serialized_end=3216
  _globals['_SUMMARYDATAPOINT']._serialized_start=3243
  _globals['_SUMMARYDATAPOINT']._serialized_end=3583
  _globals['_SUMMARYDATAPOINT_VALUEATQUANTILE']._serialized_start=3527
  _globals['_SUMMARYDATAPOINT_VALUEATQUANTILE']._serialized_end=3577
  _globals['_EXEMPLAR']._serialized_start=3586
  _globals['_EXEMPLAR']._serialized_end=3787
# @@protoc_insertion_point(module_scope)
